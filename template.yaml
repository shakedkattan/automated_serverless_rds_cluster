AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless stack for provisioning RDS (Postgres/MySQL) clusters

Resources:

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RDSProvisioningTopic

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningQueue

  SQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SQSQueue.Arn
      TopicArn: !Ref SNSTopic
      RawMessageDelivery: true

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RDSProvisionerFunction
      Handler: handler.lambda_handler
      Runtime: python3.12
      CodeUri: lambda/
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !Ref SQSQueue
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "*"
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SQSQueue
          SNS_TOPIC_ARN: !Ref SNSTopic
          GITHUB_TOKEN: !Sub '{{resolve:secretsmanager:github-access-token:SecretString:token}}'

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RDSRequestAPI
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RDSRequestAPI"
          version: "1.0"
        paths:
          /request:
            post:
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
                credentials:
                  Fn::GetAtt: ApiGatewayToSNSRole.Arn
                requestTemplates:
                  application/json: |
                    Action=Publish&TopicArn=$util.urlEncode('arn:aws:sns:eu-central-1:851725584737:RDSProvisioningTopic')&Message=$util.urlEncode($input.body)
                responses:
                  default:
                    statusCode: "200"

  ApiGatewayToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayToSNSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewaySNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref SNSTopic
