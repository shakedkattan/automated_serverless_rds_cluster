AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless stack for provisioning RDS (Postgres/MySQL) clusters

Resources:

# -----------------------------
# SECTION: Hosted Zone & Cert
# -----------------------------

  RDSHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: rds-api.shakedkattan.com

  RDSCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: rds-api.shakedkattan.com
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: rds-api.shakedkattan.com
          HostedZoneId: !Ref RDSHostedZone
      KeyAlgorithm: RSA_2048
      Tags:
        - Key: Project
          Value: ServerlessRDS
    
# -----------------------------
# SECTION: API Gateway (with Domain + Mapping)
# -----------------------------
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RDSRequestAPI
      StageName: prod
      ApiKeySourceType: HEADER
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: rds-api.shakedkattan.com
        CertificateArn: !Ref RDSCertificate
        Route53:
          HostedZoneId: !Ref RDSHostedZone
        BasePath:
          - /
        SecurityPolicy: TLS_1_2
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RDSRequestAPI"
          version: "1.0"
        paths:
          /request:
            post:
              x-amazon-apigateway-api-key-required: true
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: body
                  schema:
                    $ref: "#/definitions/RDSRequest"
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
                credentials:
                  Fn::GetAtt: ApiGatewayToSNSRole.Arn
                requestParameters:
                  integration.request.querystring.TopicArn: "'arn:aws:sns:eu-central-1:851725584737:RDSProvisioningTopic'"
                  integration.request.querystring.Message: "method.request.body"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        {
                          "message": "Request received successfully."
                        }
        definitions:
          RDSRequest:
            type: object
            required:
              - db_name
              - env
              - engine
            properties:
              db_name:
                type: string
              env:
                type: string
                enum: [dev, prod]
              engine:
                type: string
                enum: [mysql, postgres]

  ApiGatewayToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayToSNSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewaySNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref SNSTopic
  RDSApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: DevAccessKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: prod

  RDSUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: BasicUsagePlan
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: prod
      Throttle:
        RateLimit: 1
        BurstLimit: 1
      Description: Basic usage control
      ApiKey: !Ref RDSApiKey

# -----------------------------
# SECTION: SNS and SQS
# -----------------------------
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RDSProvisioningTopic

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningQueue

  SQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SQSQueue.Arn
      TopicArn: !Ref SNSTopic
      RawMessageDelivery: true
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 5
          minDelayTarget: 5
          maxDelayTarget: 10
          numNoDelayRetries: 1
          numMinDelayRetries: 2
          numMaxDelayRetries: 2
          backoffFunction: "linear"      

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
# -----------------------------
# SECTION: Lambda for RDS Provision 
# -----------------------------
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RDSProvisionerFunction
      Handler: handler.lambda_handler
      Runtime: python3.12
      CodeUri: lambda/
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !Ref SQSQueue
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "*"
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SQSQueue
          SNS_TOPIC_ARN: !Ref SNSTopic
          GITHUB_TOKEN: !Sub '{{resolve:secretsmanager:github-access-token:SecretString:token}}'
# -----------------------------
# SECTION: Outputs 
# -----------------------------
Outputs:
  RDSApiKeyValue:
    Description: API Key for accessing the RDS Provisioning endpoint
    Value: !Ref RDSApiKey
    Export:
      Name: RDSApiKey
