##
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless stack for provisioning RDS (Postgres/MySQL) clusters
Resources:
  ApiGwLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/rds-api
      RetentionInDays: 7
    Metadata:
      SamResourceId: ApiGwLogGroup
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RDSRequestAPI
      StageName: provision
      MethodSettings:
      - LoggingLevel: 'OFF'
        MetricsEnabled: true
        ResourcePath: /*
        HttpMethod: '*'
      DefinitionBody:
        swagger: '2.0'
        info:
          title: RDSRequestAPI
          version: '1.0'
        paths:
          /request:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - in: body
                name: body
                schema:
                  $ref: '#/definitions/RDSRequest'
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
                credentials:
                  Fn::GetAtt: ApiGatewayToSNSRole.Arn
                requestParameters:
                  integration.request.querystring.TopicArn: '''arn:aws:sns:eu-central-1:851725584737:RDSProvisioningTopic'''
                  integration.request.querystring.Message: method.request.body
                responses:
                  default:
                    statusCode: '200'
                    responseTemplates:
                      application/json: "{\n  \"message\": \"Request received successfully.\"\
                        \n}\n"
        definitions:
          RDSRequest:
            type: object
            required:
            - db_name
            - env
            - engine
            properties:
              db_name:
                type: string
              env:
                type: string
                enum:
                - dev
                - prod
              engine:
                type: string
                enum:
                - mysql
                - postgres
    Metadata:
      SamResourceId: ApiGateway
  ApiGatewayToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayToSNSRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewaySNSPublish
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource:
              Ref: SNSTopic
    Metadata:
      SamResourceId: ApiGatewayToSNSRole
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RDSProvisioningTopic
    Metadata:
      SamResourceId: SNSTopic
  RDSDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningDLQ
      MessageRetentionPeriod: 1209600
    Metadata:
      SamResourceId: RDSDLQ
  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RDSProvisioningDLQAlarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - RDSDLQ
          - QueueName
      AlarmDescription: "Messages in DLQ \u2013 check failed Lambda executions"
    Metadata:
      SamResourceId: DLQAlarm
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - RDSDLQ
          - Arn
        maxReceiveCount: 5
    Metadata:
      SamResourceId: SQSQueue
  SQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint:
        Fn::GetAtt:
        - SQSQueue
        - Arn
      TopicArn:
        Ref: SNSTopic
      RawMessageDelivery: true
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 5
          minDelayTarget: 5
          maxDelayTarget: 10
          numNoDelayRetries: 1
          numMinDelayRetries: 2
          numMaxDelayRetries: 2
          backoffFunction: linear
    Metadata:
      SamResourceId: SQSSubscription
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: SQSQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - SQSQueue
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: SNSTopic
    Metadata:
      SamResourceId: QueuePolicy
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RDSProvisionerFunction
      Handler: handler.lambda_handler
      Runtime: python3.12
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-3ynr0mpgixct/5843e7e9f13c5d38e75dcc9c0532e62a
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SQSQueue
              - Arn
      Policies:
      - AWSLambdaBasicExecutionRole
      - SQSPollerPolicy:
          QueueName:
            Ref: SQSQueue
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: '*'
      Environment:
        Variables:
          SQS_QUEUE_URL:
            Ref: SQSQueue
          SNS_TOPIC_ARN:
            Ref: SNSTopic
          GITHUB_TOKEN:
            Fn::Sub: '{{resolve:secretsmanager:github-access-token:SecretString:token}}'
    Metadata:
      SamResourceId: LambdaFunction
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
    Metadata:
      SamResourceId: ApplicationResourceGroup
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
    Metadata:
      SamResourceId: ApplicationInsightsMonitoring
