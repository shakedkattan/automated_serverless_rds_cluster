version: 2.1

setup: true

orbs:
  sam: circleci/aws-sam-serverless@6.1.0
  aws-cli: circleci/aws-cli@4.0.0
  terraform: circleci/terraform@3.2.1

jobs:
  deploy-serverless:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - aws-cli/install
      - sam/install
      - run:
          name: Deploy Serverless Stack with SAM
          command: |
            sam build
            sam deploy --stack-name rds-automation-stack \
                       --capabilities CAPABILITY_IAM \
                       --capabilities CAPABILITY_NAMED_IAM \
                       --region $AWS_REGION \
                       --resolve-s3 \
                       --no-confirm-changeset \
                       --no-fail-on-empty-changeset

  apply-terraform:
    executor:
      name: terraform/default
      tag: "1.5.7"
    steps:
      - checkout
      - run:
          name: Install GitHub CLI
          command: |
            type gh || (
              sudo apt-get update -y &&
              sudo apt-get install -y curl &&
              curl -fsSL https://cli.github.com/install.sh | sudo bash
            )
      - run:
          name: Terraform Apply to Changed Env
          command: |
            echo "üîç Detecting changed file..."
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              echo "Detected Pull Request: $CIRCLE_PULL_REQUEST"
              PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | awk -F '/' '{print $NF}')
              CHANGED_FILE=$(gh pr view "$PR_NUMBER" \
                --repo "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" \
                --json files --jq '.files[0].path')
            else
              echo "No PR found. Using git show fallback"
              CHANGED_FILE=$(git show --name-only --pretty="" | grep '^terraform/env/' | head -n1)
            fi

            echo "üìÅ CHANGED_FILE=$CHANGED_FILE"
            TARGET_PATH=$(echo "$CHANGED_FILE" | sed -E 's|(terraform/env/[^/]+).*|\1|')
            echo "üìÇ TARGET_PATH=$TARGET_PATH"
            cd "$TARGET_PATH"

            echo "üöÄ Running terraform..."
            terraform init -input=false
            terraform validate
            terraform plan -input=false -out=tfplan
            terraform apply -input=false -auto-approve tfplan

workflows:
  version: 2
  deploy-and-provision:
    jobs:
      - deploy-serverless:
          filters:
            branches:
              only: main
          unless:
            condition:
              matches:
                pattern: "^Merge pull request"
                value: << pipeline.git.commit.subject >>
      - apply-terraform:
          filters:
            branches:
              only: main
          when:
            condition:
              matches:
                pattern: "^Merge pull request"
                value: << pipeline.git.commit.subject >>
