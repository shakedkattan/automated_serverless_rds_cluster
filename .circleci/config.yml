version: 2.1

orbs:
  sam: circleci/aws-sam-serverless@6.1.0
  aws-cli: circleci/aws-cli@4.0.0
  terraform: circleci/terraform@3.2.1

jobs:
  deploy-serverless:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - aws-cli/install
      - sam/install
      - run:
          name: Deploy Serverless Stack with SAM
          no_output_timeout: 30m
          command: |
            STACK_NAME="rds-automation-stack"
              sam build
              sam deploy --stack-name rds-automation-stack \
                         --capabilities CAPABILITY_IAM \
                         --capabilities CAPABILITY_NAMED_IAM \
                         --region $AWS_REGION \
                         --resolve-s3 \
                         --no-confirm-changeset \
                         --no-fail-on-empty-changeset
            fi
      - run:
          name: Create Terraform State Infra if Needed
          command: |
            BUCKET_NAME="shakedkattan-tfstate-bucket"
            TABLE_NAME="terraform-locks"
            REGION="$AWS_REGION"

            if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
              echo "⛏ Creating S3 bucket: $BUCKET_NAME"
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
              aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" \
                --versioning-configuration Status=Enabled
              aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" \
                --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            else
              echo "✅ S3 bucket already exists: $BUCKET_NAME"
            fi

            if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" >/dev/null 2>&1; then
              echo "⛏ Creating DynamoDB table: $TABLE_NAME"
              aws dynamodb create-table \
                --table-name "$TABLE_NAME" \
                --attribute-definitions AttributeName=LockID,AttributeType=S \
                --key-schema AttributeName=LockID,KeyType=HASH \
                --billing-mode PAYPERREQUEST \
                --region "$REGION"
            else
              echo "✅ DynamoDB table already exists: $TABLE_NAME"
            fi
  

  apply-terraform:
    executor:
      name: terraform/default
      tag: "1.5.7"
    steps:
      - checkout
      - run:
          name: Terraform Apply to Merged Path
          command: |
            echo "Recent commits:"
            git log --oneline -n 3 || true

            echo "Detecting changed env:"
            TARGET_PATH=$(git diff --name-only HEAD^ HEAD | grep '^terraform/env/' | head -n1 | sed -E 's|(terraform/env/[^/]+).*|\1|')

            if [ -z "$TARGET_PATH" ]; then
              echo "No env path found. Skipping Terraform apply."
              exit 0
            fi

            echo "TARGET_PATH=$TARGET_PATH"
            cd "$TARGET_PATH"

            echo "Running terraform init..."
            terraform init -input=false

            echo "Validating config..."
            terraform validate

            echo "Planning changes..."
            terraform plan -input=false -out=tfplan

            echo "Plan output:"
            terraform show tfplan

            echo "Applying changes..."
            terraform apply -input=false -auto-approve tfplan
            
workflows:
  deploy-and-provision:
    jobs:
      - deploy-serverless:
          filters:
            branches:
              only: main
      - apply-terraform:
          requires:
            - deploy-serverless
          filters:
            branches:
              only: main
